// <auto-generated />
using System;
using LogicMonitor.Datamart;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LogicMonitor.Datamart.Migrations.NpgsqlMigrations
{
	[DbContext(typeof(NpgsqlContext))]
	[Migration("20241130144937_Added AuditItemDateTime")]
	partial class AddedAuditItemDateTime
	{
		/// <inheritdoc />
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "9.0.0")
				.HasAnnotation("Relational:MaxIdentifierLength", 63);

			NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

			modelBuilder.Entity("LogicMonitor.Datamart.Models.AlertRuleStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<string>("DataPoint")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("DataSourceInstanceName")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("DataSourceName")
						.IsRequired()
						.HasColumnType("text");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.HasColumnType("text");

					b.Property<Guid>("EscalationChainId")
						.HasColumnType("uuid");

					b.Property<int>("EscalationChainIntervalMinutes")
						.HasColumnType("integer");

					b.Property<string>("LevelString")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("Priority")
						.HasColumnType("integer");

					b.Property<bool>("SuppressAlertAckSdt")
						.HasColumnType("boolean");

					b.Property<bool>("SuppressAlertClear")
						.HasColumnType("boolean");

					b.HasKey("Id");

					b.HasIndex("EscalationChainId");

					b.ToTable("AlertRules");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.AlertStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<string>("AckComment")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<bool>("Acked")
						.HasColumnType("boolean");

					b.Property<string>("AckedBy")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int>("AckedOnSeconds")
						.HasColumnType("integer");

					b.Property<string>("ActiveDiscoveryAlertDescription")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int?>("AlertEscalationChainId")
						.HasColumnType("integer");

					b.Property<string>("AlertEscalationChainName")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int?>("AlertEscalationSubChainId")
						.HasColumnType("integer");

					b.Property<string>("AlertRecipients")
						.IsRequired()
						.HasMaxLength(200)
						.HasColumnType("character varying(200)");

					b.Property<Guid?>("AlertRuleId")
						.HasColumnType("uuid");

					b.Property<string>("AlertRuleName")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int>("AlertType")
						.HasColumnType("integer");

					b.Property<string>("ClearValue")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("CustomColumn1")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("CustomColumn2")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("CustomColumn3")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("CustomColumn4")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("CustomColumn5")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int>("DataPointId")
						.HasColumnType("integer");

					b.Property<string>("DataPointName")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("DependencyRole")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("DependencyRoutingState")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("DetailMessageBody")
						.IsRequired()
						.HasMaxLength(1000)
						.HasColumnType("character varying(1000)");

					b.Property<string>("DetailMessageSubject")
						.IsRequired()
						.HasMaxLength(200)
						.HasColumnType("character varying(200)");

					b.Property<string>("EnableAnomalyAlertGeneration")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("EnableAnomalyAlertSuppression")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int>("EndOnSeconds")
						.HasColumnType("integer");

					b.Property<bool>("InScheduledDownTime")
						.HasColumnType("boolean");

					b.Property<string>("InstanceDescription")
						.IsRequired()
						.HasMaxLength(1000)
						.HasColumnType("character varying(1000)");

					b.Property<int>("InstanceId")
						.HasColumnType("integer");

					b.Property<string>("InstanceName")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("InternalId")
						.IsRequired()
						.HasMaxLength(20)
						.HasColumnType("character varying(20)");

					b.Property<bool>("IsActiveDiscoveryAlert")
						.HasMaxLength(50)
						.HasColumnType("boolean");

					b.Property<bool>("IsAnomaly")
						.HasColumnType("boolean");

					b.Property<bool>("IsCleared")
						.HasColumnType("boolean");

					b.Property<string>("LogicMonitorId")
						.IsRequired()
						.HasMaxLength(20)
						.HasColumnType("character varying(20)");

					b.Property<Guid?>("MonitorObjectGroup0Id")
						.HasColumnType("uuid");

					b.Property<Guid?>("MonitorObjectGroup1Id")
						.HasColumnType("uuid");

					b.Property<Guid?>("MonitorObjectGroup2Id")
						.HasColumnType("uuid");

					b.Property<Guid?>("MonitorObjectGroup3Id")
						.HasColumnType("uuid");

					b.Property<Guid?>("MonitorObjectGroup4Id")
						.HasColumnType("uuid");

					b.Property<Guid?>("MonitorObjectGroup5Id")
						.HasColumnType("uuid");

					b.Property<Guid?>("MonitorObjectGroup6Id")
						.HasColumnType("uuid");

					b.Property<Guid?>("MonitorObjectGroup7Id")
						.HasColumnType("uuid");

					b.Property<Guid?>("MonitorObjectGroup8Id")
						.HasColumnType("uuid");

					b.Property<Guid?>("MonitorObjectGroup9Id")
						.HasColumnType("uuid");

					b.Property<int?>("MonitorObjectId")
						.HasColumnType("integer");

					b.Property<string>("MonitorObjectName")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int>("MonitorObjectType")
						.HasColumnType("integer");

					b.Property<int>("NextRecipient")
						.HasColumnType("integer");

					b.Property<int?>("ResourceId")
						.HasColumnType("integer");

					b.Property<int?>("ResourceTemplateId")
						.HasColumnType("integer");

					b.Property<string>("ResourceTemplateName")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("ResourceTemplateType")
						.HasMaxLength(10)
						.HasColumnType("character varying(10)");

					b.Property<int>("Severity")
						.HasColumnType("integer");

					b.Property<int>("StartOnSeconds")
						.HasColumnType("integer");

					b.Property<string>("SuppressedDescending")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("Suppressor")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("Tenant")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("Thresholds")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("Value")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.HasKey("Id");

					b.HasIndex("AlertRuleId");

					b.HasIndex("DataPointId");

					b.HasIndex("DataPointName");

					b.HasIndex("EndOnSeconds");

					b.HasIndex("Id");

					b.HasIndex("InstanceId");

					b.HasIndex("InstanceName");

					b.HasIndex("InternalId");

					b.HasIndex("IsCleared");

					b.HasIndex("MonitorObjectGroup0Id");

					b.HasIndex("MonitorObjectGroup1Id");

					b.HasIndex("MonitorObjectGroup2Id");

					b.HasIndex("MonitorObjectGroup3Id");

					b.HasIndex("MonitorObjectGroup4Id");

					b.HasIndex("MonitorObjectGroup5Id");

					b.HasIndex("MonitorObjectGroup6Id");

					b.HasIndex("MonitorObjectGroup7Id");

					b.HasIndex("MonitorObjectGroup8Id");

					b.HasIndex("MonitorObjectGroup9Id");

					b.HasIndex("MonitorObjectId");

					b.HasIndex("MonitorObjectName");

					b.HasIndex("MonitorObjectType");

					b.HasIndex("ResourceId");

					b.HasIndex("ResourceTemplateId");

					b.HasIndex("ResourceTemplateName");

					b.HasIndex("ResourceTemplateType");

					b.HasIndex("Severity");

					b.HasIndex("StartOnSeconds");

					b.HasIndex("StartOnSeconds", "EndOnSeconds", "IsCleared", "InScheduledDownTime", "MonitorObjectGroup0Id", "MonitorObjectGroup1Id", "MonitorObjectGroup2Id", "MonitorObjectGroup3Id", "MonitorObjectGroup4Id", "MonitorObjectGroup5Id", "MonitorObjectGroup6Id", "MonitorObjectGroup7Id", "MonitorObjectGroup8Id", "MonitorObjectGroup9Id")
						.HasDatabaseName("IX_Alerts_FasterPercentageAvailability");

					NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("StartOnSeconds", "EndOnSeconds", "IsCleared", "InScheduledDownTime", "MonitorObjectGroup0Id", "MonitorObjectGroup1Id", "MonitorObjectGroup2Id", "MonitorObjectGroup3Id", "MonitorObjectGroup4Id", "MonitorObjectGroup5Id", "MonitorObjectGroup6Id", "MonitorObjectGroup7Id", "MonitorObjectGroup8Id", "MonitorObjectGroup9Id"), new[] { "Id", "Severity", "ClearValue", "MonitorObjectId", "ResourceTemplateName", "InstanceId", "InstanceName" });

					b.ToTable("Alerts");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.AuditEventStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<string>("ActionType")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("AlertId")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("AlertNote")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("ApiMethod")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("ApiPath")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("ApiTokenId")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("CollectorDescription")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int?>("CollectorGroupId")
						.HasColumnType("integer");

					b.Property<string>("CollectorGroupName")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int?>("CollectorId")
						.HasColumnType("integer");

					b.Property<string>("CollectorName")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("Command")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("DataSourceDeletedInstanceIds")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("DataSourceDeletedInstanceNames")
						.HasMaxLength(200)
						.HasColumnType("character varying(200)");

					b.Property<string>("DataSourceNewInstanceIds")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("DataSourceNewInstanceNames")
						.HasMaxLength(200)
						.HasColumnType("character varying(200)");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DateTime")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.HasMaxLength(1000)
						.HasColumnType("character varying(1000)");

					b.Property<int?>("DeviceDataSourceId")
						.HasColumnType("integer");

					b.Property<string>("EndDownTime")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("EntityType")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("Host")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int?>("InstanceId")
						.HasColumnType("integer");

					b.Property<string>("InstanceName")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int?>("LogicModuleId")
						.HasColumnType("integer");

					b.Property<string>("LogicModuleName")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int?>("LogicModuleVersion")
						.HasColumnType("integer");

					b.Property<string>("LogicMonitorId")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int>("MatchedRegExId")
						.HasColumnType("integer");

					b.Property<long?>("MonthlyMetrics")
						.HasColumnType("bigint");

					b.Property<string>("OriginalDescription")
						.HasMaxLength(1000)
						.HasColumnType("character varying(1000)");

					b.Property<string>("OriginatorType")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("OutcomeType")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("PerformedByUsername")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("PropertyName")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("PropertyValue")
						.HasMaxLength(100)
						.HasColumnType("character varying(100)");

					b.Property<long?>("RemoteSessionId")
						.HasMaxLength(50)
						.HasColumnType("bigint");

					b.Property<string>("RemoteSessionType")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<long?>("RequestId")
						.HasColumnType("bigint");

					b.Property<int?>("ResourceGroupId")
						.HasColumnType("integer");

					b.Property<string>("ResourceGroupName")
						.HasMaxLength(100)
						.HasColumnType("character varying(100)");

					b.Property<string>("ResourceHostname")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("ResourceIds")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("ResourceNames")
						.HasMaxLength(200)
						.HasColumnType("character varying(200)");

					b.Property<bool?>("RestrictSso")
						.HasMaxLength(50)
						.HasColumnType("boolean");

					b.Property<string>("SessionId")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("StartDownTime")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("Time")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("UserEmail")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int?>("UserId")
						.HasColumnType("integer");

					b.Property<string>("UserName")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("UserRole")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("WildValue")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.HasKey("Id");

					b.ToTable("AuditEvents");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.CollectorGroupStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<int>("CollectorCount")
						.HasColumnType("integer");

					b.Property<long>("CreatedOnTimeStampSeconds")
						.HasColumnType("bigint");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.HasKey("Id");

					b.ToTable("CollectorGroups");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.CollectorStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<string>("AckComment")
						.IsRequired()
						.HasColumnType("text");

					b.Property<bool>("Acked")
						.HasColumnType("boolean");

					b.Property<string>("AckedBy")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("AckedOnLocalString")
						.IsRequired()
						.HasColumnType("text");

					b.Property<long?>("AckedOnUtcTimestampUtc")
						.HasColumnType("bigint");

					b.Property<string>("Architecture")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("BackupCollectorId")
						.HasColumnType("integer");

					b.Property<int>("Build")
						.HasColumnType("integer");

					b.Property<bool>("CanDowngrade")
						.HasColumnType("boolean");

					b.Property<string>("CanDowngradeReason")
						.IsRequired()
						.HasColumnType("text");

					b.Property<bool>("ClearSent")
						.HasColumnType("boolean");

					b.Property<string>("CollectorConfiguration")
						.IsRequired()
						.HasColumnType("text");

					b.Property<Guid>("CollectorGroupId")
						.HasColumnType("uuid");

					b.Property<string>("Configuration")
						.HasColumnType("text");

					b.Property<int>("ConfigurationVersion")
						.HasColumnType("integer");

					b.Property<string>("CreatedOnLocalString")
						.IsRequired()
						.HasColumnType("text");

					b.Property<long>("CreatedOnTimeStampUtc")
						.HasColumnType("bigint");

					b.Property<string>("Credential")
						.HasColumnType("text");

					b.Property<string>("Credential2")
						.HasColumnType("text");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("DeviceCount")
						.HasColumnType("integer");

					b.Property<bool>("Ea")
						.HasColumnType("boolean");

					b.Property<bool>("EnableFailBack")
						.HasColumnType("boolean");

					b.Property<bool>("EnableFailOverOnCollectorDevice")
						.HasColumnType("boolean");

					b.Property<int>("EscalationChainId")
						.HasColumnType("integer");

					b.Property<bool>("HasFailOverDevice")
						.HasColumnType("boolean");

					b.Property<string>("HostName")
						.IsRequired()
						.HasColumnType("text");

					b.Property<bool>("InSdt")
						.HasColumnType("boolean");

					b.Property<bool>("IsDown")
						.HasColumnType("boolean");

					b.Property<bool>("IsEncoded")
						.HasColumnType("boolean");

					b.Property<bool>("IsLmLogsEnabled")
						.HasColumnType("boolean");

					b.Property<bool>("IsLmLogsSyslogEnabled")
						.HasColumnType("boolean");

					b.Property<string>("LastSentNotificationOnLocal")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("LastSentNotificationOnTimeStampUtc")
						.HasColumnType("integer");

					b.Property<int>("LogicMonitorDeviceId")
						.HasColumnType("integer");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.Property<bool>("NeedAutoCreateCollectorDevice")
						.HasColumnType("boolean");

					b.Property<int>("NetscanVersion")
						.HasColumnType("integer");

					b.Property<int>("NextRecipient")
						.HasColumnType("integer");

					b.Property<string>("OnetimeDowngradeInfo")
						.HasColumnType("text");

					b.Property<string>("OtelVersion")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Platform")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("PreviousVersion")
						.HasColumnType("integer");

					b.Property<string>("ProxyConfiguration")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("ResendIntervalSeconds")
						.HasColumnType("integer");

					b.Property<string>("Size")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("SpecifiedCollectorDeviceGroupId")
						.HasColumnType("integer");

					b.Property<int>("Status")
						.HasColumnType("integer");

					b.Property<bool>("SuppressAlertClear")
						.HasColumnType("boolean");

					b.Property<string>("UpdatedOnLocalString")
						.IsRequired()
						.HasColumnType("text");

					b.Property<long?>("UpdatedOnTimeStampUtc")
						.HasColumnType("bigint");

					b.Property<long>("UpgradeTimeUtcSeconds")
						.HasColumnType("bigint");

					b.Property<int>("UptimeSeconds")
						.HasColumnType("integer");

					b.Property<string>("UserChangeOnLocal")
						.IsRequired()
						.HasColumnType("text");

					b.Property<long>("UserChangeOnUtcSeconds")
						.HasColumnType("bigint");

					b.Property<int>("UserPermission")
						.HasColumnType("integer");

					b.Property<int>("UserVisibleDeviceCount")
						.HasColumnType("integer");

					b.Property<int>("UserVisibleWebsiteCount")
						.HasColumnType("integer");

					b.Property<string>("WatchdogConfiguration")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("WatchdogUpdatedOnLocal")
						.IsRequired()
						.HasColumnType("text");

					b.Property<long?>("WatchdogUpdatedOnSeconds")
						.HasColumnType("bigint");

					b.Property<string>("WebsiteConfiguration")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("WebsiteCount")
						.HasColumnType("integer");

					b.Property<string>("WrapperConfiguration")
						.IsRequired()
						.HasColumnType("text");

					b.HasKey("Id");

					b.HasIndex("CollectorGroupId");

					b.ToTable("Collectors");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ConfigSourceStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.HasKey("Id");

					b.ToTable("ConfigSources");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.DataSourceDataPointStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<string>("Calculation")
						.IsRequired()
						.HasColumnType("text");

					b.Property<Guid?>("DataSourceGraphId")
						.HasColumnType("uuid");

					b.Property<Guid?>("DataSourceGraphStoreItemId")
						.HasColumnType("uuid");

					b.Property<Guid>("DataSourceId")
						.HasColumnType("uuid");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("GlobalAlertExpression")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("MeasurementUnit")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("PercentageAvailabilityCalculation")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Property1")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Property10")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Property2")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Property3")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Property4")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Property5")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Property6")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Property7")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Property8")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Property9")
						.IsRequired()
						.HasColumnType("text");

					b.Property<bool>("ResyncTimeSeriesData")
						.HasColumnType("boolean");

					b.Property<string>("Tags")
						.IsRequired()
						.HasColumnType("text");

					b.HasKey("Id");

					b.HasIndex("DataSourceGraphStoreItemId");

					b.HasIndex("DataSourceId");

					b.ToTable("DataSourceDataPoints");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.DataSourceGraphStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<Guid>("DataSourceId")
						.HasColumnType("uuid");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<int>("DisplayPriority")
						.HasColumnType("integer");

					b.Property<int>("Height")
						.HasColumnType("integer");

					b.Property<bool>("IsBase1024")
						.HasColumnType("boolean");

					b.Property<bool>("IsOverview")
						.HasColumnType("boolean");

					b.Property<bool>("IsRigid")
						.HasColumnType("boolean");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<double?>("MaxValue")
						.HasColumnType("double precision");

					b.Property<double?>("MinValue")
						.HasColumnType("double precision");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Timescale")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Title")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("VerticalLabel")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("Width")
						.HasColumnType("integer");

					b.HasKey("Id");

					b.HasIndex("DataSourceId");

					b.ToTable("DataSourceGraphs");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.DataSourceStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<string>("AppliesTo")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("AuditVersion")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Checksum")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("CollectionAttributeIp")
						.HasColumnType("text");

					b.Property<string>("CollectionAttributeName")
						.HasColumnType("text");

					b.Property<string>("CollectionMethod")
						.IsRequired()
						.HasColumnType("text");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("DisplayName")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Group")
						.IsRequired()
						.HasColumnType("text");

					b.Property<bool>("HasMultiInstances")
						.HasColumnType("boolean");

					b.Property<string>("InstallationMetadataAuditedRegistryId")
						.HasColumnType("text");

					b.Property<string>("InstallationMetadataAuditedVersion")
						.HasColumnType("text");

					b.Property<bool?>("InstallationMetadataIsChangedFromOrigin")
						.HasColumnType("boolean");

					b.Property<bool?>("InstallationMetadataIsChangedFromTargetLastPublished")
						.HasColumnType("boolean");

					b.Property<int?>("InstallationMetadataLogicModuleId")
						.HasColumnType("integer");

					b.Property<string>("InstallationMetadataLogicModuleType")
						.HasColumnType("text");

					b.Property<string>("InstallationMetadataOriginAuthorCompanyUuid")
						.HasColumnType("text");

					b.Property<string>("InstallationMetadataOriginAuthorNamespace")
						.HasColumnType("text");

					b.Property<string>("InstallationMetadataOriginChecksum")
						.HasColumnType("text");

					b.Property<string>("InstallationMetadataOriginLineageId")
						.HasColumnType("text");

					b.Property<string>("InstallationMetadataOriginRegistryId")
						.HasColumnType("text");

					b.Property<string>("InstallationMetadataOriginVersion")
						.HasColumnType("text");

					b.Property<string>("InstallationMetadataTargetLastPublishedChecksum")
						.HasColumnType("text");

					b.Property<string>("InstallationMetadataTargetLastPublishedId")
						.HasColumnType("text");

					b.Property<string>("InstallationMetadataTargetLastPublishedVersion")
						.HasColumnType("text");

					b.Property<string>("InstallationMetadataTargetLineageId")
						.HasColumnType("text");

					b.Property<long?>("LastTimeSeriesDataSyncDurationMs")
						.HasColumnType("bigint");

					b.Property<string>("LineageId")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("PayloadVersion")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("PollingIntervalSeconds")
						.HasColumnType("integer");

					b.Property<string>("Tags")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Technology")
						.IsRequired()
						.HasColumnType("text");

					b.Property<bool>("UseWildValueAsUuid")
						.HasColumnType("boolean");

					b.Property<string>("Version")
						.IsRequired()
						.HasColumnType("text");

					b.HasKey("Id");

					b.ToTable("DataSources");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.EscalationChainStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("text");

					b.Property<bool>("EnableThrottling")
						.HasColumnType("boolean");

					b.Property<bool>("InAlerting")
						.HasColumnType("boolean");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("ThrottlingAlertCount")
						.HasColumnType("integer");

					b.Property<int>("ThrottlingPeriodMinutes")
						.HasColumnType("integer");

					b.HasKey("Id");

					b.ToTable("EscalationChains");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.EventSourceStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.HasKey("Id");

					b.ToTable("EventSources");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.IntegrationStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<int?>("AccountId")
						.HasColumnType("integer");

					b.Property<string>("AckAlertDataType")
						.HasColumnType("text");

					b.Property<string>("AckHeaders")
						.HasColumnType("text");

					b.Property<string>("AckMethod")
						.HasColumnType("text");

					b.Property<string>("AckOAuthAccessTokenUrl")
						.HasColumnType("text");

					b.Property<string>("AckOAuthClientId")
						.HasColumnType("text");

					b.Property<string>("AckOAuthClientSecret")
						.HasColumnType("text");

					b.Property<string>("AckOAuthGrantType")
						.HasColumnType("text");

					b.Property<string>("AckOAuthScope")
						.HasColumnType("text");

					b.Property<string>("AckOAuthVersion")
						.HasColumnType("text");

					b.Property<string>("AckPassword")
						.HasColumnType("text");

					b.Property<string>("AckPayload")
						.HasColumnType("text");

					b.Property<string>("AckPayloadFormat")
						.HasColumnType("text");

					b.Property<string>("AckUrl")
						.HasColumnType("text");

					b.Property<string>("AckUsername")
						.HasColumnType("text");

					b.Property<string>("AlertDataType")
						.HasColumnType("text");

					b.Property<string>("Body")
						.HasColumnType("text");

					b.Property<string>("ClearAlertDataType")
						.HasColumnType("text");

					b.Property<string>("ClearHeaders")
						.HasColumnType("text");

					b.Property<string>("ClearMethod")
						.HasColumnType("text");

					b.Property<string>("ClearOAuthAccessTokenUrl")
						.HasColumnType("text");

					b.Property<string>("ClearOAuthClientId")
						.HasColumnType("text");

					b.Property<string>("ClearOAuthClientSecret")
						.HasColumnType("text");

					b.Property<string>("ClearOAuthGrantType")
						.HasColumnType("text");

					b.Property<string>("ClearOAuthScope")
						.HasColumnType("text");

					b.Property<string>("ClearOAuthVersion")
						.HasColumnType("text");

					b.Property<string>("ClearPassword")
						.HasColumnType("text");

					b.Property<string>("ClearPayload")
						.HasColumnType("text");

					b.Property<string>("ClearPayloadFormat")
						.HasColumnType("text");

					b.Property<string>("ClearUrl")
						.HasColumnType("text");

					b.Property<string>("ClearUsername")
						.HasColumnType("text");

					b.Property<int?>("CriticalPriority")
						.HasColumnType("integer");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.HasColumnType("text");

					b.Property<string>("DueDateTime")
						.HasColumnType("text");

					b.Property<string>("EnabledStatus")
						.HasColumnType("text");

					b.Property<int?>("ErrorPriority")
						.HasColumnType("integer");

					b.Property<string>("Extra")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Headers")
						.HasColumnType("text");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("Method")
						.HasColumnType("text");

					b.Property<string>("Name")
						.HasColumnType("text");

					b.Property<string>("OAuthAccessTokenUrl")
						.HasColumnType("text");

					b.Property<string>("OAuthClientId")
						.HasColumnType("text");

					b.Property<string>("OAuthClientSecret")
						.HasColumnType("text");

					b.Property<string>("OAuthGrantType")
						.HasColumnType("text");

					b.Property<string>("OAuthScope")
						.HasColumnType("text");

					b.Property<string>("OAuthVersion")
						.HasColumnType("text");

					b.Property<string>("ParseExpression")
						.HasColumnType("text");

					b.Property<string>("ParseMethod")
						.HasColumnType("text");

					b.Property<string>("Password")
						.HasColumnType("text");

					b.Property<string>("Payload")
						.HasColumnType("text");

					b.Property<string>("PayloadFormat")
						.HasColumnType("text");

					b.Property<int?>("QueueId")
						.HasColumnType("integer");

					b.Property<string>("Receivers")
						.HasColumnType("text");

					b.Property<string>("Sender")
						.HasColumnType("text");

					b.Property<int?>("StatusAckTicket")
						.HasColumnType("integer");

					b.Property<int?>("StatusCloseTicket")
						.HasColumnType("integer");

					b.Property<int?>("StatusNewTicket")
						.HasColumnType("integer");

					b.Property<int?>("StatusUpdateTicket")
						.HasColumnType("integer");

					b.Property<string>("Subject")
						.HasColumnType("text");

					b.Property<string>("Type")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("UpdateAlertDataType")
						.HasColumnType("text");

					b.Property<string>("UpdateDataAlertDataType")
						.HasColumnType("text");

					b.Property<string>("UpdateDataHeaders")
						.HasColumnType("text");

					b.Property<string>("UpdateDataMethod")
						.HasColumnType("text");

					b.Property<string>("UpdateDataOAuthAccessTokenUrl")
						.HasColumnType("text");

					b.Property<string>("UpdateDataOAuthClientId")
						.HasColumnType("text");

					b.Property<string>("UpdateDataOAuthClientSecret")
						.HasColumnType("text");

					b.Property<string>("UpdateDataOAuthGrantType")
						.HasColumnType("text");

					b.Property<string>("UpdateDataOAuthScope")
						.HasColumnType("text");

					b.Property<string>("UpdateDataOAuthVersion")
						.HasColumnType("text");

					b.Property<string>("UpdateDataPassword")
						.HasColumnType("text");

					b.Property<string>("UpdateDataPayload")
						.HasColumnType("text");

					b.Property<string>("UpdateDataPayloadFormat")
						.HasColumnType("text");

					b.Property<string>("UpdateDataUrl")
						.HasColumnType("text");

					b.Property<string>("UpdateDataUsername")
						.HasColumnType("text");

					b.Property<string>("UpdateHeaders")
						.HasColumnType("text");

					b.Property<string>("UpdateMethod")
						.HasColumnType("text");

					b.Property<string>("UpdateOAuthAccessTokenUrl")
						.HasColumnType("text");

					b.Property<string>("UpdateOAuthClientId")
						.HasColumnType("text");

					b.Property<string>("UpdateOAuthClientSecret")
						.HasColumnType("text");

					b.Property<string>("UpdateOAuthGrantType")
						.HasColumnType("text");

					b.Property<string>("UpdateOAuthScope")
						.HasColumnType("text");

					b.Property<string>("UpdateOAuthVersion")
						.HasColumnType("text");

					b.Property<string>("UpdatePassword")
						.HasColumnType("text");

					b.Property<string>("UpdatePayload")
						.HasColumnType("text");

					b.Property<string>("UpdatePayloadFormat")
						.HasColumnType("text");

					b.Property<string>("UpdateUrl")
						.HasColumnType("text");

					b.Property<string>("UpdateUsername")
						.HasColumnType("text");

					b.Property<string>("Url")
						.HasColumnType("text");

					b.Property<string>("Username")
						.HasColumnType("text");

					b.Property<int?>("WarnPriority")
						.HasColumnType("integer");

					b.Property<int?>("Zone")
						.HasColumnType("integer");

					b.HasKey("Id");

					b.ToTable("Integrations");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.LogStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("text");

					b.Property<long>("HappenedOnTimeStampUtc")
						.HasColumnType("bigint");

					b.Property<string>("IpAddress")
						.IsRequired()
						.HasMaxLength(200)
						.HasColumnType("character varying(200)");

					b.Property<string>("LogicMonitorId")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("SessionId")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("UserName")
						.IsRequired()
						.HasMaxLength(100)
						.HasColumnType("character varying(100)");

					b.HasKey("Id");

					b.ToTable("LogItems");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.LogicModuleUpdateStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<string>("AppliesTo")
						.IsRequired()
						.HasMaxLength(1000)
						.HasColumnType("character varying(1000)");

					b.Property<long>("AuditVersion")
						.HasColumnType("bigint");

					b.Property<string>("Category")
						.IsRequired()
						.HasMaxLength(20)
						.HasColumnType("character varying(20)");

					b.Property<string>("CollectionMethod")
						.IsRequired()
						.HasMaxLength(20)
						.HasColumnType("character varying(20)");

					b.Property<string>("CurrentUuid")
						.IsRequired()
						.HasMaxLength(30)
						.HasColumnType("character varying(30)");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTime>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.IsRequired()
						.HasMaxLength(1000)
						.HasColumnType("character varying(1000)");

					b.Property<string>("Group")
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<string>("Local")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<int>("LocalId")
						.HasColumnType("integer");

					b.Property<long>("LocalVersion")
						.HasColumnType("bigint");

					b.Property<string>("Locator")
						.IsRequired()
						.HasMaxLength(20)
						.HasColumnType("character varying(20)");

					b.Property<string>("Name")
						.IsRequired()
						.HasMaxLength(200)
						.HasColumnType("character varying(200)");

					b.Property<string>("Namespace")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("character varying(50)");

					b.Property<long>("PublishedAtMilliseconds")
						.HasColumnType("bigint");

					b.Property<string>("Quality")
						.IsRequired()
						.HasMaxLength(20)
						.HasColumnType("character varying(20)");

					b.Property<string>("RegistryVersion")
						.IsRequired()
						.HasMaxLength(20)
						.HasColumnType("character varying(20)");

					b.Property<string>("Remote")
						.IsRequired()
						.HasMaxLength(1000)
						.HasColumnType("character varying(1000)");

					b.Property<string>("RestLm")
						.HasMaxLength(200)
						.HasColumnType("character varying(200)");

					b.Property<string>("Type")
						.IsRequired()
						.HasMaxLength(20)
						.HasColumnType("character varying(20)");

					b.Property<long>("Version")
						.HasColumnType("bigint");

					b.HasKey("Id");

					b.ToTable("LogicModuleUpdates");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.MonitorObjectGroupStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("FullPath")
						.IsRequired()
						.HasMaxLength(200)
						.HasColumnType("character varying(200)");

					b.Property<int>("MonitoredObjectType")
						.HasColumnType("integer");

					b.HasKey("Id");

					b.HasIndex("FullPath", "MonitoredObjectType");

					b.ToTable("MonitorObjectGroups");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ResourceDataSourceInstanceDataPointStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<DateTimeOffset?>("DataCompleteTo")
						.HasColumnType("timestamp with time zone");

					b.Property<Guid>("DataSourceDataPointId")
						.HasColumnType("uuid");

					b.Property<Guid?>("DataSourceStoreItemId")
						.HasColumnType("uuid");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<Guid>("DeviceDataSourceInstanceId")
						.HasColumnType("uuid");

					b.Property<string>("InstanceDatapointProperty1")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceDatapointProperty10")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceDatapointProperty2")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceDatapointProperty3")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceDatapointProperty4")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceDatapointProperty5")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceDatapointProperty6")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceDatapointProperty7")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceDatapointProperty8")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceDatapointProperty9")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.HasKey("Id");

					b.HasIndex("DataSourceDataPointId");

					b.HasIndex("DataSourceStoreItemId");

					b.HasIndex("DeviceDataSourceInstanceId");

					b.ToTable("DeviceDataSourceInstanceDataPoints");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ResourceDataSourceInstanceStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<int>("AlertDisableStatus")
						.HasColumnType("integer");

					b.Property<int>("AlertStatus")
						.HasColumnType("integer");

					b.Property<int>("AlertStatusPriority")
						.HasColumnType("integer");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("text");

					b.Property<Guid>("DeviceDataSourceId")
						.HasColumnType("uuid");

					b.Property<bool>("DisableAlerting")
						.HasColumnType("boolean");

					b.Property<string>("DisplayName")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("GroupId")
						.HasColumnType("integer");

					b.Property<string>("GroupName")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceProperty1")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceProperty10")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceProperty2")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceProperty3")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceProperty4")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceProperty5")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceProperty6")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceProperty7")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceProperty8")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("InstanceProperty9")
						.IsRequired()
						.HasColumnType("text");

					b.Property<long>("LastCollectedTimeSeconds")
						.HasColumnType("bigint");

					b.Property<long>("LastUpdatedTimeSeconds")
						.HasColumnType("bigint");

					b.Property<DateTimeOffset?>("LastWentMissing")
						.HasColumnType("timestamp with time zone");

					b.Property<bool>("LockDescription")
						.HasColumnType("boolean");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("SdtAt")
						.HasColumnType("text");

					b.Property<int>("SdtStatus")
						.HasColumnType("integer");

					b.Property<bool>("StopMonitoring")
						.HasColumnType("boolean");

					b.Property<string>("WildValue")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("WildValue2")
						.IsRequired()
						.HasColumnType("text");

					b.HasKey("Id");

					b.HasIndex("DeviceDataSourceId");

					b.HasIndex("LastWentMissing");

					b.ToTable("DeviceDataSourceInstances");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ResourceDataSourceStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<long>("AssignedOnSeconds")
						.HasColumnType("bigint");

					b.Property<long>("CreatedOnSeconds")
						.HasColumnType("bigint");

					b.Property<Guid>("DataSourceId")
						.HasColumnType("uuid");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<Guid>("DeviceId")
						.HasColumnType("uuid");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<long>("UpdatedOnSeconds")
						.HasColumnType("bigint");

					b.HasKey("Id");

					b.HasIndex("DataSourceId");

					b.HasIndex("DeviceId");

					b.ToTable("DeviceDataSources");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ResourceGroupStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<int>("AlertDisableStatus")
						.HasColumnType("integer");

					b.Property<bool>("AlertEnable")
						.HasColumnType("boolean");

					b.Property<int>("AlertStatus")
						.HasColumnType("integer");

					b.Property<int>("AlertStatusPriority")
						.HasColumnType("integer");

					b.Property<string>("AppliesTo")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("AutoVisualResult")
						.HasColumnType("text");

					b.Property<int>("AwsDeviceCount")
						.HasColumnType("integer");

					b.Property<string>("AwsRegionsInfo")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("AwsTestResult")
						.HasColumnType("text");

					b.Property<int>("AwsTestResultCode")
						.HasColumnType("integer");

					b.Property<int>("AzureDeviceCount")
						.HasColumnType("integer");

					b.Property<string>("AzureRegionsInfo")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("AzureTestResult")
						.HasColumnType("text");

					b.Property<int>("AzureTestResultCode")
						.HasColumnType("integer");

					b.Property<string>("ClusterAlertStatus")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("ClusterAlertStatusPriority")
						.HasColumnType("integer");

					b.Property<int?>("CreatedOnTimestampUtc")
						.HasColumnType("integer");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<int>("DefaultAgentId")
						.HasColumnType("integer");

					b.Property<string>("DefaultCollectorDescription")
						.HasColumnType("text");

					b.Property<int>("DefaultCollectorId")
						.HasColumnType("integer");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("DeviceCount")
						.HasColumnType("integer");

					b.Property<int>("DeviceGroupType")
						.HasColumnType("integer");

					b.Property<int>("DirectDeviceCount")
						.HasColumnType("integer");

					b.Property<int>("DirectSubGroupCount")
						.HasColumnType("integer");

					b.Property<bool>("EffectiveAlertEnabled")
						.HasColumnType("boolean");

					b.Property<string>("FullPath")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("GcpDeviceCount")
						.HasColumnType("integer");

					b.Property<string>("GcpRegionsInfo")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("GcpTestResult")
						.HasColumnType("text");

					b.Property<int>("GcpTestResultCode")
						.HasColumnType("integer");

					b.Property<string>("GroupStatus")
						.IsRequired()
						.HasColumnType("text");

					b.Property<bool>("HasNetflowEnabledDevices")
						.HasColumnType("boolean");

					b.Property<bool>("IsAlertingDisabled")
						.HasColumnType("boolean");

					b.Property<bool>("IsNetflowEnabled")
						.HasColumnType("boolean");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("ParentId")
						.HasColumnType("integer");

					b.Property<int>("SdtStatus")
						.HasColumnType("integer");

					b.Property<int>("UserPermission")
						.HasColumnType("integer");

					b.HasKey("Id");

					b.ToTable("DeviceGroups");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ResourceStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<int>("AlertDisableStatus")
						.HasColumnType("integer");

					b.Property<int>("AlertStatus")
						.HasColumnType("integer");

					b.Property<int>("AlertStatusPriority")
						.HasColumnType("integer");

					b.Property<bool>("AncestorHasDisabledLogicModule")
						.HasColumnType("boolean");

					b.Property<long?>("AutoPropertiesAssignedOnSeconds")
						.HasColumnType("bigint");

					b.Property<long?>("AutoPropertiesUpdatedOnSeconds")
						.HasColumnType("bigint");

					b.Property<int>("AwsState")
						.HasColumnType("integer");

					b.Property<int>("AzureState")
						.HasColumnType("integer");

					b.Property<bool>("CanUseRemoteSession")
						.HasColumnType("boolean");

					b.Property<string>("CollectorDescription")
						.IsRequired()
						.HasColumnType("text");

					b.Property<long?>("CreatedOnSeconds")
						.HasColumnType("bigint");

					b.Property<int>("CurrentCollectorId")
						.HasColumnType("integer");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<long>("DeletedTimeInMs")
						.HasColumnType("bigint");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("DeviceGroupIdsString")
						.IsRequired()
						.HasColumnType("text");

					b.Property<byte>("DeviceStatus")
						.HasColumnType("smallint");

					b.Property<int>("DeviceType")
						.HasColumnType("integer");

					b.Property<string>("DisplayName")
						.IsRequired()
						.HasColumnType("text");

					b.Property<bool>("EffectiveAlertEnabled")
						.HasColumnType("boolean");

					b.Property<bool>("EnableNetflow")
						.HasColumnType("boolean");

					b.Property<int>("GcpState")
						.HasColumnType("integer");

					b.Property<bool>("HasActiveInstance")
						.HasColumnType("boolean");

					b.Property<bool>("HasDisabledSubResource")
						.HasColumnType("boolean");

					b.Property<bool>("HasMore")
						.HasColumnType("boolean");

					b.Property<bool>("IsAlertingDisabled")
						.HasColumnType("boolean");

					b.Property<long>("LastAlertClosedTimeSeconds")
						.HasColumnType("bigint");

					b.Property<long?>("LastDataTimeSeconds")
						.HasColumnType("bigint");

					b.Property<long?>("LastRawDataTimeSeconds")
						.HasColumnType("bigint");

					b.Property<long?>("LastTimeSeriesDataSyncDurationMs")
						.HasColumnType("bigint");

					b.Property<string>("Link")
						.HasColumnType("text");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("NetflowCollectorDescription")
						.HasColumnType("text");

					b.Property<int>("NetflowCollectorGroupId")
						.HasColumnType("integer");

					b.Property<string>("NetflowCollectorGroupName")
						.HasColumnType("text");

					b.Property<int>("NetflowCollectorId")
						.HasColumnType("integer");

					b.Property<Guid?>("PreferredCollectorId")
						.HasColumnType("uuid");

					b.Property<string>("Property1")
						.HasColumnType("text");

					b.Property<string>("Property10")
						.HasColumnType("text");

					b.Property<string>("Property11")
						.HasColumnType("text");

					b.Property<string>("Property12")
						.HasColumnType("text");

					b.Property<string>("Property13")
						.HasColumnType("text");

					b.Property<string>("Property14")
						.HasColumnType("text");

					b.Property<string>("Property15")
						.HasColumnType("text");

					b.Property<string>("Property16")
						.HasColumnType("text");

					b.Property<string>("Property17")
						.HasColumnType("text");

					b.Property<string>("Property18")
						.HasColumnType("text");

					b.Property<string>("Property19")
						.HasColumnType("text");

					b.Property<string>("Property2")
						.HasColumnType("text");

					b.Property<string>("Property20")
						.HasColumnType("text");

					b.Property<string>("Property3")
						.HasColumnType("text");

					b.Property<string>("Property4")
						.HasColumnType("text");

					b.Property<string>("Property5")
						.HasColumnType("text");

					b.Property<string>("Property6")
						.HasColumnType("text");

					b.Property<string>("Property7")
						.HasColumnType("text");

					b.Property<string>("Property8")
						.HasColumnType("text");

					b.Property<string>("Property9")
						.HasColumnType("text");

					b.Property<int>("RelatedDeviceId")
						.HasColumnType("integer");

					b.Property<int>("ScanConfigId")
						.HasColumnType("integer");

					b.Property<int>("SdtStatus")
						.HasColumnType("integer");

					b.Property<long>("ToDeleteTimeInMs")
						.HasColumnType("bigint");

					b.Property<long?>("UpdatedOnSeconds")
						.HasColumnType("bigint");

					b.Property<int>("UptimeInSeconds")
						.HasColumnType("integer");

					b.Property<int>("UserPermission")
						.HasColumnType("integer");

					b.HasKey("Id");

					b.HasIndex("PreferredCollectorId");

					b.ToTable("Devices");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.TimeSeriesDataAggregationStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<double?>("AvailabilityPercent")
						.HasColumnType("double precision");

					b.Property<double?>("Centile05")
						.HasColumnType("double precision");

					b.Property<double?>("Centile10")
						.HasColumnType("double precision");

					b.Property<double?>("Centile25")
						.HasColumnType("double precision");

					b.Property<double?>("Centile50")
						.HasColumnType("double precision");

					b.Property<double?>("Centile75")
						.HasColumnType("double precision");

					b.Property<double?>("Centile90")
						.HasColumnType("double precision");

					b.Property<double?>("Centile95")
						.HasColumnType("double precision");

					b.Property<int?>("CriticalCount")
						.HasColumnType("integer");

					b.Property<int>("DataCount")
						.HasColumnType("integer");

					b.Property<Guid>("DeviceDataSourceInstanceDataPointId")
						.HasColumnType("uuid");

					b.Property<int?>("ErrorCount")
						.HasColumnType("integer");

					b.Property<double?>("First")
						.HasColumnType("double precision");

					b.Property<double?>("FirstWithData")
						.HasColumnType("double precision");

					b.Property<double?>("Last")
						.HasColumnType("double precision");

					b.Property<double?>("LastWithData")
						.HasColumnType("double precision");

					b.Property<double?>("Max")
						.HasColumnType("double precision");

					b.Property<double?>("Min")
						.HasColumnType("double precision");

					b.Property<int>("NoDataCount")
						.HasColumnType("integer");

					b.Property<int?>("NormalCount")
						.HasColumnType("integer");

					b.Property<DateTimeOffset>("PeriodEnd")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("PeriodStart")
						.HasColumnType("timestamp with time zone");

					b.Property<double>("Sum")
						.HasColumnType("double precision");

					b.Property<double>("SumSquared")
						.HasColumnType("double precision");

					b.Property<int?>("WarningCount")
						.HasColumnType("integer");

					b.HasKey("Id");

					b.HasIndex("DeviceDataSourceInstanceDataPointId");

					b.ToTable("TimeSeriesDataAggregations");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.WebsiteGroupStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<int>("AlertDisableStatus")
						.HasColumnType("integer");

					b.Property<int>("AlertStatus")
						.HasColumnType("integer");

					b.Property<int>("AlertStatusPriority")
						.HasColumnType("integer");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("DirectWebsiteCount")
						.HasColumnType("integer");

					b.Property<int>("DirectWebsiteGroupCount")
						.HasColumnType("integer");

					b.Property<bool>("DisableAlerting")
						.HasColumnType("boolean");

					b.Property<string>("FullPath")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("GroupStatus")
						.HasColumnType("integer");

					b.Property<bool>("HasWebsitesDisabled")
						.HasColumnType("boolean");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.Property<int>("ParentId")
						.HasColumnType("integer");

					b.Property<int>("SdtStatus")
						.HasColumnType("integer");

					b.Property<bool?>("StopMonitoring")
						.HasColumnType("boolean");

					b.Property<int>("UserPermissionString")
						.HasColumnType("integer");

					b.Property<int>("WebsiteCount")
						.HasColumnType("integer");

					b.HasKey("Id");

					b.ToTable("WebsiteGroups");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.WebsiteStoreItem", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uuid");

					b.Property<int>("AlertDisableStatus")
						.HasColumnType("integer");

					b.Property<string>("AlertExpression")
						.HasColumnType("text");

					b.Property<int>("AlertStatus")
						.HasColumnType("integer");

					b.Property<int>("AlertStatusPriority")
						.HasColumnType("integer");

					b.Property<int>("Count")
						.HasColumnType("integer");

					b.Property<DateTimeOffset>("DatamartCreated")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastModified")
						.HasColumnType("timestamp with time zone");

					b.Property<DateTimeOffset>("DatamartLastObserved")
						.HasColumnType("timestamp with time zone");

					b.Property<string>("Description")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Domain")
						.HasColumnType("text");

					b.Property<int>("GlobalSmAlertCond")
						.HasColumnType("integer");

					b.Property<string>("HostName")
						.HasColumnType("text");

					b.Property<bool>("IgnoreSsl")
						.HasColumnType("boolean");

					b.Property<byte>("IndividualAlertLevel")
						.HasColumnType("smallint");

					b.Property<bool>("IndividualSmAlertEnable")
						.HasColumnType("boolean");

					b.Property<bool>("IsAlertingDisabled")
						.HasColumnType("boolean");

					b.Property<bool>("IsInternal")
						.HasColumnType("boolean");

					b.Property<int>("LogicMonitorId")
						.HasColumnType("integer");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("text");

					b.Property<byte>("OverallAlertLevel")
						.HasColumnType("smallint");

					b.Property<int>("PacketsNotReceivedTimeoutMs")
						.HasColumnType("integer");

					b.Property<int>("PageLoadAlertTimeInMs")
						.HasColumnType("integer");

					b.Property<int>("PercentPacketsNotReceiveInTime")
						.HasColumnType("integer");

					b.Property<int>("PollingIntervalMinutes")
						.HasColumnType("integer");

					b.Property<string>("Schema")
						.IsRequired()
						.HasColumnType("text");

					b.Property<string>("Script")
						.HasColumnType("text");

					b.Property<int>("SdtStatus")
						.HasColumnType("integer");

					b.Property<int>("Status")
						.HasColumnType("integer");

					b.Property<bool>("StopMonitoring")
						.HasColumnType("boolean");

					b.Property<bool>("StopMonitoringByWebsiteGroup")
						.HasColumnType("boolean");

					b.Property<int>("Transition")
						.HasColumnType("integer");

					b.Property<bool>("TriggerSslExpirationAlerts")
						.HasColumnType("boolean");

					b.Property<bool>("TriggerSslStatusAlerts")
						.HasColumnType("boolean");

					b.Property<int>("Type")
						.HasColumnType("integer");

					b.Property<bool>("UseDefaultAlertSetting")
						.HasColumnType("boolean");

					b.Property<bool>("UseDefaultLocationSetting")
						.HasColumnType("boolean");

					b.Property<int>("UserPermissionString")
						.HasColumnType("integer");

					b.Property<Guid>("WebsiteGroupId")
						.HasColumnType("uuid");

					b.Property<int>("WebsiteMethod")
						.HasColumnType("integer");

					b.HasKey("Id");

					b.HasIndex("WebsiteGroupId");

					b.ToTable("Websites");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.AlertRuleStoreItem", b =>
				{
					b.HasOne("LogicMonitor.Datamart.Models.EscalationChainStoreItem", "EscalationChain")
						.WithMany("AlertRules")
						.HasForeignKey("EscalationChainId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("EscalationChain");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.AlertStoreItem", b =>
				{
					b.HasOne("LogicMonitor.Datamart.Models.AlertRuleStoreItem", "AlertRule")
						.WithMany("AlertStoreItems")
						.HasForeignKey("AlertRuleId")
						.OnDelete(DeleteBehavior.Restrict);

					b.HasOne("LogicMonitor.Datamart.Models.MonitorObjectGroupStoreItem", "MonitorObjectGroup0")
						.WithMany("AlertsFromGroup0")
						.HasForeignKey("MonitorObjectGroup0Id")
						.OnDelete(DeleteBehavior.Restrict);

					b.HasOne("LogicMonitor.Datamart.Models.MonitorObjectGroupStoreItem", "MonitorObjectGroup1")
						.WithMany("AlertsFromGroup1")
						.HasForeignKey("MonitorObjectGroup1Id")
						.OnDelete(DeleteBehavior.Restrict);

					b.HasOne("LogicMonitor.Datamart.Models.MonitorObjectGroupStoreItem", "MonitorObjectGroup2")
						.WithMany("AlertsFromGroup2")
						.HasForeignKey("MonitorObjectGroup2Id")
						.OnDelete(DeleteBehavior.Restrict);

					b.HasOne("LogicMonitor.Datamart.Models.MonitorObjectGroupStoreItem", "MonitorObjectGroup3")
						.WithMany("AlertsFromGroup3")
						.HasForeignKey("MonitorObjectGroup3Id")
						.OnDelete(DeleteBehavior.Restrict);

					b.HasOne("LogicMonitor.Datamart.Models.MonitorObjectGroupStoreItem", "MonitorObjectGroup4")
						.WithMany("AlertsFromGroup4")
						.HasForeignKey("MonitorObjectGroup4Id")
						.OnDelete(DeleteBehavior.Restrict);

					b.HasOne("LogicMonitor.Datamart.Models.MonitorObjectGroupStoreItem", "MonitorObjectGroup5")
						.WithMany("AlertsFromGroup5")
						.HasForeignKey("MonitorObjectGroup5Id")
						.OnDelete(DeleteBehavior.Restrict);

					b.HasOne("LogicMonitor.Datamart.Models.MonitorObjectGroupStoreItem", "MonitorObjectGroup6")
						.WithMany("AlertsFromGroup6")
						.HasForeignKey("MonitorObjectGroup6Id")
						.OnDelete(DeleteBehavior.Restrict);

					b.HasOne("LogicMonitor.Datamart.Models.MonitorObjectGroupStoreItem", "MonitorObjectGroup7")
						.WithMany("AlertsFromGroup7")
						.HasForeignKey("MonitorObjectGroup7Id")
						.OnDelete(DeleteBehavior.Restrict);

					b.HasOne("LogicMonitor.Datamart.Models.MonitorObjectGroupStoreItem", "MonitorObjectGroup8")
						.WithMany("AlertsFromGroup8")
						.HasForeignKey("MonitorObjectGroup8Id")
						.OnDelete(DeleteBehavior.Restrict);

					b.HasOne("LogicMonitor.Datamart.Models.MonitorObjectGroupStoreItem", "MonitorObjectGroup9")
						.WithMany("AlertsFromGroup9")
						.HasForeignKey("MonitorObjectGroup9Id")
						.OnDelete(DeleteBehavior.Restrict);

					b.Navigation("AlertRule");

					b.Navigation("MonitorObjectGroup0");

					b.Navigation("MonitorObjectGroup1");

					b.Navigation("MonitorObjectGroup2");

					b.Navigation("MonitorObjectGroup3");

					b.Navigation("MonitorObjectGroup4");

					b.Navigation("MonitorObjectGroup5");

					b.Navigation("MonitorObjectGroup6");

					b.Navigation("MonitorObjectGroup7");

					b.Navigation("MonitorObjectGroup8");

					b.Navigation("MonitorObjectGroup9");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.CollectorStoreItem", b =>
				{
					b.HasOne("LogicMonitor.Datamart.Models.CollectorGroupStoreItem", "CollectorGroup")
						.WithMany("Collectors")
						.HasForeignKey("CollectorGroupId")
						.OnDelete(DeleteBehavior.Restrict)
						.IsRequired();

					b.Navigation("CollectorGroup");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.DataSourceDataPointStoreItem", b =>
				{
					b.HasOne("LogicMonitor.Datamart.Models.DataSourceGraphStoreItem", null)
						.WithMany("DataPoints")
						.HasForeignKey("DataSourceGraphStoreItemId");

					b.HasOne("LogicMonitor.Datamart.Models.DataSourceStoreItem", "DataSource")
						.WithMany()
						.HasForeignKey("DataSourceId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("DataSource");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.DataSourceGraphStoreItem", b =>
				{
					b.HasOne("LogicMonitor.Datamart.Models.DataSourceStoreItem", "DataSource")
						.WithMany("Graphs")
						.HasForeignKey("DataSourceId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("DataSource");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ResourceDataSourceInstanceDataPointStoreItem", b =>
				{
					b.HasOne("LogicMonitor.Datamart.Models.DataSourceDataPointStoreItem", "DataSourceDataPoint")
						.WithMany("DeviceDataSourceInstanceDataPoints")
						.HasForeignKey("DataSourceDataPointId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("LogicMonitor.Datamart.Models.DataSourceStoreItem", null)
						.WithMany("DataPoints")
						.HasForeignKey("DataSourceStoreItemId");

					b.HasOne("LogicMonitor.Datamart.Models.ResourceDataSourceInstanceStoreItem", "DeviceDataSourceInstance")
						.WithMany("DeviceDataSourceInstanceDataPoints")
						.HasForeignKey("DeviceDataSourceInstanceId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("DataSourceDataPoint");

					b.Navigation("DeviceDataSourceInstance");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ResourceDataSourceInstanceStoreItem", b =>
				{
					b.HasOne("LogicMonitor.Datamart.Models.ResourceDataSourceStoreItem", "DeviceDataSource")
						.WithMany("DeviceDataSourceInstances")
						.HasForeignKey("DeviceDataSourceId")
						.OnDelete(DeleteBehavior.Restrict)
						.IsRequired();

					b.Navigation("DeviceDataSource");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ResourceDataSourceStoreItem", b =>
				{
					b.HasOne("LogicMonitor.Datamart.Models.DataSourceStoreItem", "DataSource")
						.WithMany("DeviceDataSources")
						.HasForeignKey("DataSourceId")
						.OnDelete(DeleteBehavior.Restrict)
						.IsRequired();

					b.HasOne("LogicMonitor.Datamart.Models.ResourceStoreItem", "Device")
						.WithMany("DeviceDataSources")
						.HasForeignKey("DeviceId")
						.OnDelete(DeleteBehavior.Restrict)
						.IsRequired();

					b.Navigation("DataSource");

					b.Navigation("Device");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ResourceStoreItem", b =>
				{
					b.HasOne("LogicMonitor.Datamart.Models.CollectorStoreItem", "PreferredCollector")
						.WithMany("Devices")
						.HasForeignKey("PreferredCollectorId");

					b.Navigation("PreferredCollector");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.TimeSeriesDataAggregationStoreItem", b =>
				{
					b.HasOne("LogicMonitor.Datamart.Models.ResourceDataSourceInstanceDataPointStoreItem", "DeviceDataSourceInstanceDataPoint")
						.WithMany("TimeSeriesDataAggregations")
						.HasForeignKey("DeviceDataSourceInstanceDataPointId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("DeviceDataSourceInstanceDataPoint");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.WebsiteStoreItem", b =>
				{
					b.HasOne("LogicMonitor.Datamart.Models.WebsiteGroupStoreItem", "WebsiteGroup")
						.WithMany("Websites")
						.HasForeignKey("WebsiteGroupId")
						.OnDelete(DeleteBehavior.Restrict)
						.IsRequired();

					b.Navigation("WebsiteGroup");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.AlertRuleStoreItem", b =>
				{
					b.Navigation("AlertStoreItems");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.CollectorGroupStoreItem", b =>
				{
					b.Navigation("Collectors");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.CollectorStoreItem", b =>
				{
					b.Navigation("Devices");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.DataSourceDataPointStoreItem", b =>
				{
					b.Navigation("DeviceDataSourceInstanceDataPoints");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.DataSourceGraphStoreItem", b =>
				{
					b.Navigation("DataPoints");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.DataSourceStoreItem", b =>
				{
					b.Navigation("DataPoints");

					b.Navigation("DeviceDataSources");

					b.Navigation("Graphs");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.EscalationChainStoreItem", b =>
				{
					b.Navigation("AlertRules");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.MonitorObjectGroupStoreItem", b =>
				{
					b.Navigation("AlertsFromGroup0");

					b.Navigation("AlertsFromGroup1");

					b.Navigation("AlertsFromGroup2");

					b.Navigation("AlertsFromGroup3");

					b.Navigation("AlertsFromGroup4");

					b.Navigation("AlertsFromGroup5");

					b.Navigation("AlertsFromGroup6");

					b.Navigation("AlertsFromGroup7");

					b.Navigation("AlertsFromGroup8");

					b.Navigation("AlertsFromGroup9");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ResourceDataSourceInstanceDataPointStoreItem", b =>
				{
					b.Navigation("TimeSeriesDataAggregations");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ResourceDataSourceInstanceStoreItem", b =>
				{
					b.Navigation("DeviceDataSourceInstanceDataPoints");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ResourceDataSourceStoreItem", b =>
				{
					b.Navigation("DeviceDataSourceInstances");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.ResourceStoreItem", b =>
				{
					b.Navigation("DeviceDataSources");
				});

			modelBuilder.Entity("LogicMonitor.Datamart.Models.WebsiteGroupStoreItem", b =>
				{
					b.Navigation("Websites");
				});
#pragma warning restore 612, 618
		}
	}
}