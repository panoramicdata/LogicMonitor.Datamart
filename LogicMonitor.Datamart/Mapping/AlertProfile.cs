namespace LogicMonitor.Datamart.Mapping;

public class AlertProfile : Profile
{
	public AlertProfile()
	{
		CreateMap<Alert, AlertStoreItem>()
				// Navigation properties
				.ForMember(
					dest => dest.LogicMonitorId,
					opts => opts.MapFrom(src => src.Id))
				.ForMember(dest => dest.AlertRule, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup0, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup1, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup2, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup3, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup4, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup5, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup6, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup7, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup8, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup9, opts => opts.Ignore())

				// Auto generated by the database server
				.ForMember(dest => dest.Id, opts => opts.Ignore())

				// Handled manually and by EF during save as appropriate
				.ForMember(dest => dest.DatamartCreated, opts => opts.Ignore())
				.ForMember(dest => dest.DatamartLastModified, opts => opts.Ignore())

				// The following can come in as 0, which means unassigned
				.ForMember(
					dest => dest.AlertRuleId,
					opts => opts.Ignore())
				.ForMember(
					dest => dest.AlertEscalationChainId,
					opts => opts.MapFrom(src => src.AlertEscalationChainId == 0 ? (int?)null : src.AlertEscalationChainId))
				.ForMember(
					dest => dest.AlertEscalationSubChainId,
					opts => opts.MapFrom(src => src.AlertEscalationSubChainId == 0 ? (int?)null : src.AlertEscalationSubChainId))

				// Manually set afterwards
				.ForMember(dest => dest.MonitorObjectGroup0Id, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup1Id, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup2Id, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup3Id, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup4Id, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup5Id, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup6Id, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup7Id, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup8Id, opts => opts.Ignore())
				.ForMember(dest => dest.MonitorObjectGroup9Id, opts => opts.Ignore())

				.ForMember(
					dest => dest.DetailMessageSubject,
					opts => opts.MapFrom(src => src.DetailMessage.Subject))
				.ForMember(
					dest => dest.DetailMessageBody,
					opts => opts.MapFrom(src => src.DetailMessage.Body))
				.ForMember(
					dest => dest.CustomColumn1,
					opts => opts.Ignore())
				.ForMember(
					dest => dest.CustomColumn2,
					opts => opts.Ignore())
				.ForMember(
					dest => dest.CustomColumn3,
					opts => opts.Ignore())
				.ForMember(
					dest => dest.CustomColumn4,
					opts => opts.Ignore())
				.ForMember(
					dest => dest.CustomColumn5,
					opts => opts.Ignore())
				.AfterMap<TruncateMappingAction<Alert, AlertStoreItem>>()
					;

		CreateMap<AlertStoreItem, Alert>()
			.ForMember(dest => dest.AlertRuleId, opts => opts.Ignore())
			.ForMember(
				dest => dest.DetailMessage,
				opts => opts.MapFrom(
					src => new AlertDetailMessage
					{
						Subject = src.DetailMessageSubject,
						Body = src.DetailMessageBody
					}
				)
			)
			.ForMember(dest => dest.Sdt, opts => opts.Ignore())
			.ForMember(dest => dest.CustomColumns, opts => opts.Ignore())
			.ForMember(dest => dest.MonitorObjectGroups, opts => opts.Ignore())
			.ForMember(dest => dest.AlertGroupEntityValue, opts => opts.Ignore())
			;
	}
}
