using System.Text.Json;

namespace LogicMonitor.Datamart.Mapping;

public class IntegrationProfile : Profile
{
	public IntegrationProfile()
	{
		var serializationOptions = new JsonSerializerOptions
		{
			PropertyNamingPolicy = JsonNamingPolicy.CamelCase
		};

		CreateMap<HttpIntegration, IntegrationStoreItem>()
			.ForMember(dest => dest.Id, opts => opts.Ignore())
			.ForMember(dest => dest.LogicMonitorId, opts => opts.MapFrom(src => src.Id))
			.ForMember(dest => dest.DatamartCreated, opts => opts.Ignore())
			.ForMember(dest => dest.DatamartLastModified, opts => opts.Ignore())
			.ForMember(dest => dest.DatamartLastObserved, opts => opts.Ignore())
			.ForMember(dest => dest.Subject, opts => opts.Ignore())
			.ForMember(dest => dest.Name, opts => opts.Ignore())
			.ForMember(dest => dest.Body, opts => opts.Ignore())
			.ForMember(dest => dest.Description, opts => opts.Ignore())
			.ForMember(dest => dest.Receivers, opts => opts.Ignore())
			.ForMember(dest => dest.Sender, opts => opts.Ignore())
			.ForMember(dest => dest.Url, opts => opts.Ignore())
			.ForMember(dest => dest.EnabledStatus, opts => opts.MapFrom(src => JsonSerializer.Serialize(src.EnabledStatus, serializationOptions)))
			.ForMember(dest => dest.Headers, opts => opts.MapFrom(src => JsonSerializer.Serialize(src.Headers, serializationOptions)))
			.ForMember(dest => dest.UpdateHeaders, opts => opts.MapFrom(src => JsonSerializer.Serialize(src.UpdateHeaders, serializationOptions)))
			.ForMember(dest => dest.UpdateDataHeaders, opts => opts.MapFrom(src => JsonSerializer.Serialize(src.UpdateDataHeaders, serializationOptions)))
			.ForMember(dest => dest.AckHeaders, opts => opts.MapFrom(src => JsonSerializer.Serialize(src.AckHeaders, serializationOptions)))
			.ForMember(dest => dest.ClearHeaders, opts => opts.MapFrom(src => JsonSerializer.Serialize(src.ClearHeaders, serializationOptions)))
			.ForMember(dest => dest.Zone, opts => opts.Ignore())
			.ForMember(dest => dest.AccountId, opts => opts.Ignore())
			.ForMember(dest => dest.DueDateTime, opts => opts.Ignore())
			.ForMember(dest => dest.QueueId, opts => opts.Ignore())
			.ForMember(dest => dest.WarnPriority, opts => opts.Ignore())
			.ForMember(dest => dest.ErrorPriority, opts => opts.Ignore())
			.ForMember(dest => dest.CriticalPriority, opts => opts.Ignore())
			.ForMember(dest => dest.StatusNewTicket, opts => opts.Ignore())
			.ForMember(dest => dest.StatusUpdateTicket, opts => opts.Ignore())
			.ForMember(dest => dest.StatusCloseTicket, opts => opts.Ignore())
			.ForMember(dest => dest.StatusAckTicket, opts => opts.Ignore())
			;

		CreateMap<EmailIntegration, IntegrationStoreItem>()
			.ForMember(dest => dest.Id, opts => opts.Ignore())
			.ForMember(dest => dest.LogicMonitorId, opts => opts.MapFrom(src => src.Id))
			.ForMember(dest => dest.DatamartCreated, opts => opts.Ignore())
			.ForMember(dest => dest.DatamartLastModified, opts => opts.Ignore())
			.ForMember(dest => dest.DatamartLastObserved, opts => opts.Ignore())
			.ForMember(dest => dest.Headers, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.AckHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.ClearHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.Subject, opts => opts.MapFrom(src => src.Subject))
			.ForMember(dest => dest.Name, opts => opts.MapFrom(src => src.Name))
			.ForMember(dest => dest.Body, opts => opts.MapFrom(src => src.Body))
			.ForMember(dest => dest.Description, opts => opts.MapFrom(src => src.Description))
			.ForMember(dest => dest.Receivers, opts => opts.MapFrom(src => src.Receivers))
			.ForMember(dest => dest.Sender, opts => opts.MapFrom(src => src.Sender))
			.ForMember(dest => dest.AckHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.AckMethod, opts => opts.Ignore())
			.ForMember(dest => dest.AckOAuthVersion, opts => opts.Ignore())
			.ForMember(dest => dest.AckOAuthGrantType, opts => opts.Ignore())
			.ForMember(dest => dest.AckOAuthAccessTokenUrl, opts => opts.Ignore())
			.ForMember(dest => dest.AckOAuthClientId, opts => opts.Ignore())
			.ForMember(dest => dest.AckOAuthClientSecret, opts => opts.Ignore())
			.ForMember(dest => dest.AckOAuthScope, opts => opts.Ignore())
			.ForMember(dest => dest.AckPassword, opts => opts.Ignore())
			.ForMember(dest => dest.AckPayload, opts => opts.Ignore())
			.ForMember(dest => dest.AckPayloadFormat, opts => opts.Ignore())
			.ForMember(dest => dest.AckUrl, opts => opts.Ignore())
			.ForMember(dest => dest.AckUsername, opts => opts.Ignore())
			.ForMember(dest => dest.AckAlertDataType, opts => opts.Ignore())
			.ForMember(dest => dest.AlertDataType, opts => opts.Ignore())
			.ForMember(dest => dest.ClearHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.ClearMethod, opts => opts.Ignore())
			.ForMember(dest => dest.ClearOAuthVersion, opts => opts.Ignore())
			.ForMember(dest => dest.ClearOAuthGrantType, opts => opts.Ignore())
			.ForMember(dest => dest.ClearOAuthAccessTokenUrl, opts => opts.Ignore())
			.ForMember(dest => dest.ClearOAuthClientId, opts => opts.Ignore())
			.ForMember(dest => dest.ClearOAuthClientSecret, opts => opts.Ignore())
			.ForMember(dest => dest.ClearOAuthScope, opts => opts.Ignore())
			.ForMember(dest => dest.ClearPassword, opts => opts.Ignore())
			.ForMember(dest => dest.ClearPayload, opts => opts.Ignore())
			.ForMember(dest => dest.ClearPayloadFormat, opts => opts.Ignore())
			.ForMember(dest => dest.ClearUrl, opts => opts.Ignore())
			.ForMember(dest => dest.ClearUsername, opts => opts.Ignore())
			.ForMember(dest => dest.EnabledStatus, opts => opts.Ignore())
			.ForMember(dest => dest.Headers, opts => opts.Ignore())
			.ForMember(dest => dest.Method, opts => opts.Ignore())
			.ForMember(dest => dest.ParseMethod, opts => opts.Ignore())
			.ForMember(dest => dest.ParseExpression, opts => opts.Ignore())
			.ForMember(dest => dest.Payload, opts => opts.Ignore())
			.ForMember(dest => dest.PayloadFormat, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateMethod, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateUrl, opts => opts.Ignore())
			.ForMember(dest => dest.Username, opts => opts.Ignore())
			.ForMember(dest => dest.OAuthVersion, opts => opts.Ignore())
			.ForMember(dest => dest.OAuthGrantType, opts => opts.Ignore())
			.ForMember(dest => dest.OAuthAccessTokenUrl, opts => opts.Ignore())
			.ForMember(dest => dest.OAuthClientId, opts => opts.Ignore())
			.ForMember(dest => dest.OAuthClientSecret, opts => opts.Ignore())
			.ForMember(dest => dest.OAuthScope, opts => opts.Ignore())
			.ForMember(dest => dest.Password, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.UpdatePassword, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataMethod, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataUrl, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataUsername, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataPassword, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataPayload, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataPayloadFormat, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataAlertDataType, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateAlertDataType, opts => opts.Ignore())
			.ForMember(dest => dest.ClearAlertDataType, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataOAuthVersion, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataOAuthGrantType, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataOAuthAccessTokenUrl, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataOAuthClientId, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataOAuthClientSecret, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataOAuthScope, opts => opts.Ignore())
			.ForMember(dest => dest.UpdatePayload, opts => opts.Ignore())
			.ForMember(dest => dest.UpdatePayloadFormat, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateUsername, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateOAuthVersion, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateOAuthGrantType, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateOAuthAccessTokenUrl, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateOAuthClientId, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateOAuthClientSecret, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateOAuthScope, opts => opts.Ignore())
			.ForMember(dest => dest.Url, opts => opts.Ignore())
			.ForMember(dest => dest.Zone, opts => opts.Ignore())
			.ForMember(dest => dest.AccountId, opts => opts.Ignore())
			.ForMember(dest => dest.DueDateTime, opts => opts.Ignore())
			.ForMember(dest => dest.QueueId, opts => opts.Ignore())
			.ForMember(dest => dest.WarnPriority, opts => opts.Ignore())
			.ForMember(dest => dest.ErrorPriority, opts => opts.Ignore())
			.ForMember(dest => dest.CriticalPriority, opts => opts.Ignore())
			.ForMember(dest => dest.StatusNewTicket, opts => opts.Ignore())
			.ForMember(dest => dest.StatusUpdateTicket, opts => opts.Ignore())
			.ForMember(dest => dest.StatusCloseTicket, opts => opts.Ignore())
			.ForMember(dest => dest.StatusAckTicket, opts => opts.Ignore())
			;

		CreateMap<AutoTaskIntegration, IntegrationStoreItem>()
			.ForMember(dest => dest.Id, opts => opts.Ignore())
			.ForMember(dest => dest.LogicMonitorId, opts => opts.MapFrom(src => src.Id))
			.ForMember(dest => dest.DatamartCreated, opts => opts.Ignore())
			.ForMember(dest => dest.DatamartLastModified, opts => opts.Ignore())
			.ForMember(dest => dest.DatamartLastObserved, opts => opts.Ignore())
			.ForMember(dest => dest.Headers, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.AckHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.ClearHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.Subject, opts => opts.Ignore())
			.ForMember(dest => dest.Name, opts => opts.MapFrom(src => src.Name))
			.ForMember(dest => dest.Body, opts => opts.Ignore())
			.ForMember(dest => dest.Description, opts => opts.MapFrom(src => src.Description))
			.ForMember(dest => dest.Receivers, opts => opts.Ignore())
			.ForMember(dest => dest.Sender, opts => opts.Ignore())
			.ForMember(dest => dest.Zone, opts => opts.MapFrom(src => src.Zone))
			.ForMember(dest => dest.AccountId, opts => opts.MapFrom(src => src.AccountId))
			.ForMember(dest => dest.DueDateTime, opts => opts.MapFrom(src => src.DueDateTime))
			.ForMember(dest => dest.QueueId, opts => opts.MapFrom(src => src.QueueId))
			.ForMember(dest => dest.WarnPriority, opts => opts.MapFrom(src => src.WarnPriority))
			.ForMember(dest => dest.ErrorPriority, opts => opts.MapFrom(src => src.ErrorPriority))
			.ForMember(dest => dest.CriticalPriority, opts => opts.MapFrom(src => src.CriticalPriority))
			.ForMember(dest => dest.StatusNewTicket, opts => opts.MapFrom(src => src.StatusNewTicket))
			.ForMember(dest => dest.StatusUpdateTicket, opts => opts.MapFrom(src => src.StatusUpdateTicket))
			.ForMember(dest => dest.StatusCloseTicket, opts => opts.MapFrom(src => src.StatusCloseTicket))
			.ForMember(dest => dest.StatusAckTicket, opts => opts.MapFrom(src => src.StatusAckTicket))
			.ForMember(dest => dest.AckHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.AckMethod, opts => opts.Ignore())
			.ForMember(dest => dest.AckOAuthVersion, opts => opts.Ignore())
			.ForMember(dest => dest.AckOAuthGrantType, opts => opts.Ignore())
			.ForMember(dest => dest.AckOAuthAccessTokenUrl, opts => opts.Ignore())
			.ForMember(dest => dest.AckOAuthClientId, opts => opts.Ignore())
			.ForMember(dest => dest.AckOAuthClientSecret, opts => opts.Ignore())
			.ForMember(dest => dest.AckOAuthScope, opts => opts.Ignore())
			.ForMember(dest => dest.AckPassword, opts => opts.Ignore())
			.ForMember(dest => dest.AckPayload, opts => opts.Ignore())
			.ForMember(dest => dest.AckPayloadFormat, opts => opts.Ignore())
			.ForMember(dest => dest.AckUrl, opts => opts.Ignore())
			.ForMember(dest => dest.AckUsername, opts => opts.Ignore())
			.ForMember(dest => dest.AckAlertDataType, opts => opts.Ignore())
			.ForMember(dest => dest.AlertDataType, opts => opts.Ignore())
			.ForMember(dest => dest.ClearHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.ClearMethod, opts => opts.Ignore())
			.ForMember(dest => dest.ClearOAuthVersion, opts => opts.Ignore())
			.ForMember(dest => dest.ClearOAuthGrantType, opts => opts.Ignore())
			.ForMember(dest => dest.ClearOAuthAccessTokenUrl, opts => opts.Ignore())
			.ForMember(dest => dest.ClearOAuthClientId, opts => opts.Ignore())
			.ForMember(dest => dest.ClearOAuthClientSecret, opts => opts.Ignore())
			.ForMember(dest => dest.ClearOAuthScope, opts => opts.Ignore())
			.ForMember(dest => dest.ClearPassword, opts => opts.Ignore())
			.ForMember(dest => dest.ClearPayload, opts => opts.Ignore())
			.ForMember(dest => dest.ClearPayloadFormat, opts => opts.Ignore())
			.ForMember(dest => dest.ClearUrl, opts => opts.Ignore())
			.ForMember(dest => dest.ClearUsername, opts => opts.Ignore())
			.ForMember(dest => dest.EnabledStatus, opts => opts.Ignore())
			.ForMember(dest => dest.Headers, opts => opts.Ignore())
			.ForMember(dest => dest.Method, opts => opts.Ignore())
			.ForMember(dest => dest.ParseMethod, opts => opts.Ignore())
			.ForMember(dest => dest.ParseExpression, opts => opts.Ignore())
			.ForMember(dest => dest.Payload, opts => opts.Ignore())
			.ForMember(dest => dest.PayloadFormat, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateMethod, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateUrl, opts => opts.Ignore())
			.ForMember(dest => dest.Username, opts => opts.Ignore())
			.ForMember(dest => dest.OAuthVersion, opts => opts.Ignore())
			.ForMember(dest => dest.OAuthGrantType, opts => opts.Ignore())
			.ForMember(dest => dest.OAuthAccessTokenUrl, opts => opts.Ignore())
			.ForMember(dest => dest.OAuthClientId, opts => opts.Ignore())
			.ForMember(dest => dest.OAuthClientSecret, opts => opts.Ignore())
			.ForMember(dest => dest.OAuthScope, opts => opts.Ignore())
			.ForMember(dest => dest.Password, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.UpdatePassword, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataMethod, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataUrl, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataUsername, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataPassword, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataPayload, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataPayloadFormat, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataHeaders, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataAlertDataType, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateAlertDataType, opts => opts.Ignore())
			.ForMember(dest => dest.ClearAlertDataType, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataOAuthVersion, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataOAuthGrantType, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataOAuthAccessTokenUrl, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataOAuthClientId, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataOAuthClientSecret, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateDataOAuthScope, opts => opts.Ignore())
			.ForMember(dest => dest.UpdatePayload, opts => opts.Ignore())
			.ForMember(dest => dest.UpdatePayloadFormat, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateUsername, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateOAuthVersion, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateOAuthGrantType, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateOAuthAccessTokenUrl, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateOAuthClientId, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateOAuthClientSecret, opts => opts.Ignore())
			.ForMember(dest => dest.UpdateOAuthScope, opts => opts.Ignore())
			.ForMember(dest => dest.Url, opts => opts.Ignore())
			.ForMember(dest => dest.Zone, opts => opts.Ignore())
			.ForMember(dest => dest.AccountId, opts => opts.Ignore())
			.ForMember(dest => dest.DueDateTime, opts => opts.Ignore())
			.ForMember(dest => dest.QueueId, opts => opts.Ignore())
			.ForMember(dest => dest.WarnPriority, opts => opts.Ignore())
			.ForMember(dest => dest.ErrorPriority, opts => opts.Ignore())
			.ForMember(dest => dest.CriticalPriority, opts => opts.Ignore())
			.ForMember(dest => dest.StatusNewTicket, opts => opts.Ignore())
			.ForMember(dest => dest.StatusUpdateTicket, opts => opts.Ignore())
			.ForMember(dest => dest.StatusCloseTicket, opts => opts.Ignore())
			.ForMember(dest => dest.StatusAckTicket, opts => opts.Ignore())
		;
	}
}